% Author: Kevin Kowalski (Caltech '12, B.S. Computer Science)
% Neural Signal Processing Laboratory (http://www.nsplab.org), UCLA
% Last revision: 19 May 2012

% -------- OVERVIEW --------
% This function takes a batch of neural parameters, an intended velocity,
% and a time step size and returns the random number of spikes generated by
% each neuron over that time step. The number of spikes generated by each
% neuron 'i' is assumed to be Bernoulli with mean 
%     lambda_i = exp(a_i * v_x + b_i * v_y + c_i),
% where 'a_i', 'b_i', and 'c_i' are the parameters of neuron 'i' and
% '[v_x; v_y]' is the intended velocity of the owner of the neurons. This 
% is the intensity function described in Moran and Schwartz (1999, J.
% Neurophysiol.) and Truccolo, et al. (2005, J. Neurophysiol.). We used
% this model in Srinivasan, et al. (2006, Neural Computation) and in
% Kowalski and Srinivasan (2012, manuscript in prep.). Bernoulli draws are
% used instead of the Time Rescaling Theorem (Brown et al. 2001, Neural
% Computation) to provide for faster performance on a desktop computer.
%
% -------- INPUT --------
% - 'neuralParameters' should be an 'm x 3' matrix, where 'm' is the number
%   of neurons in the ensemble. It should look like
%               [ [a_1 b_1 c_1];
%                 [a_2 b_2 c_2];
%                      ...
%                 [a_m b_m c_m] ];
%   where 'a_i', 'b_i', and 'c_i' are the parameters of neuron 'i'.
% - 'velocity' should be either a '1 x 2' or '2 x 1' matrix.
% - 'timeStep' should be a positive scalar.
% - Units for each of these variables should be concordant. For example, if
%   velocities are in m/s and the time step size is in s, to achieve a
%   baseline firing rate of 10 spikes/s and a maximum firing rate of 25
%   spikes/s with a preferred direction theta_p, reasonable values for the
%   neural parameters are
%       a_i = 4.58 * cos(theta_p)
%       b_i = 4.58 * sin(theta_p)
%       c_i = 2.30
%
% -------- OUTPUT --------
% - 'spikes' will be an 'm x 1' vector of 0's and 1's, where 'm'
%   is the number of neurons in the ensemble. The entries of 'spikes'
%   correspond to the rows of 'neuralParameters', so that 'spikes(i)' gives
%   the number of spikes generated by neuron 'i' during the time step.

function spikes = generateNeuralSignals(neuralParameters, ...
    velocity, timeStep)

    % Calculate 'lambda', the Poisson intensity, of each neural firing
    % distribution.
    lambdas = exp(neuralParameters * [velocity(1) velocity(2) 1]');
    
    % Generate spike counts for each neuron.
    spikes = rand(size(lambdas)) < lambdas * timeStep;

end

